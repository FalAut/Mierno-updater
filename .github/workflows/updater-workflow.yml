name: Process Modpack Updates

on:
    workflow_dispatch:
        inputs:
            ref:
                description: "Mierno repository reference (branch/tag)"
                default: "main"
                required: true
            force_update:
                description: "Force update even if no changes detected"
                type: boolean
                default: false

jobs:
    process-updates:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Mierno-updater repository
              uses: actions/checkout@v4
              with:
                  path: updater-repo
                  token: ${{ secrets.MODPACK_UPDATER_TOKEN }}

            - name: Checkout Mierno repository
              uses: actions/checkout@v4
              with:
                  repository: FalAut/Mierno
                  ref: ${{ github.event.inputs.ref }}
                  fetch-depth: 0
                  path: mel-repo
                  token: ${{ secrets.MODPACK_UPDATER_TOKEN }}


            - name: Get latest version
              id: version
              working-directory: mel-repo
              run: |
                  LATEST_VERSION=$(sed -n '/^##\s*v[0-9]/p' CHANGELOG.md | head -n1 | sed 's/^## v//')
                  PREV_VERSION=$(sed -n '/^##\s*v[0-9]/p' CHANGELOG.md | head -n2 | tail -n1 | sed 's/^## v//')
                  echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT
                  echo "PREV_VERSION=${PREV_VERSION}" >> $GITHUB_OUTPUT

            - name: Find changed files
              id: changed_files
              working-directory: mel-repo
              run: |
                  # Get the last two commits
                  LATEST_COMMIT=$(git rev-parse HEAD)
                  PREVIOUS_COMMIT=$(git rev-parse HEAD^)

                  # Find modified and added files
                  MODIFIED_FILES=$(git diff --name-only --diff-filter=M $PREVIOUS_COMMIT $LATEST_COMMIT | grep -E "^(config|defaultconfigs|hotai|kubejs|ldlib)/" || true)
                  ADDED_FILES=$(git diff --name-only --diff-filter=A $PREVIOUS_COMMIT $LATEST_COMMIT | grep -E "^(config|defaultconfigs|hotai|kubejs|ldlib)/" || true)
                  # Find deleted files
                  DELETED_FILES=$(git diff --name-only --diff-filter=D $PREVIOUS_COMMIT $LATEST_COMMIT | grep -E "^(config|defaultconfigs|hotai|kubejs|ldlib)/" || true)

                  if [ -n "$MODIFIED_FILES" ] || [ -n "$ADDED_FILES" ] || [ -n "$DELETED_FILES" ] || ${{ github.event.inputs.force_update }}; then
                    # Save modified and added files
                    echo "modified_files<<EOF" >> $GITHUB_OUTPUT
                    echo "$MODIFIED_FILES" >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT

                    echo "added_files<<EOF" >> $GITHUB_OUTPUT
                    echo "$ADDED_FILES" >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT

                    # Save deleted files
                    echo "deleted_files<<EOF" >> $GITHUB_OUTPUT
                    echo "$DELETED_FILES" >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT

                    echo "changes_detected=true" >> $GITHUB_OUTPUT
                  else
                    echo "changes_detected=false" >> $GITHUB_OUTPUT
                  fi

            - name: Process changed files and generate hashes
              if: steps.changed_files.outputs.changes_detected == 'true'
              run: |
                  cd mel-repo

                  mkdir -p "../updater-repo/hotfixes/${{ steps.version.outputs.PREV_VERSION }}"
                  mkdir -p "../updater-repo/hashes/${{ steps.version.outputs.PREV_VERSION }}"

                  # Process modified and added files
                  if [ -n "${{ steps.changed_files.outputs.modified_files }}" ]; then
                    echo "${{ steps.changed_files.outputs.modified_files }}" | while IFS= read -r file; do
                      if [ ! -z "$file" ]; then
                        mkdir -p "../updater-repo/hotfixes/${{ steps.version.outputs.PREV_VERSION }}/$(dirname "$file")"
                        cp "$file" "../updater-repo/hotfixes/${{ steps.version.outputs.PREV_VERSION }}/$file"
                        HASH=$(sha256sum "$file" | awk '{print $1}')
                        echo "$file|$HASH" >> "../updater-repo/hashes/${{ steps.version.outputs.PREV_VERSION }}/hashes.txt"
                      fi
                    done
                  fi

                  if [ -n "${{ steps.changed_files.outputs.added_files }}" ]; then
                    echo "${{ steps.changed_files.outputs.added_files }}" | while IFS= read -r file; do
                      if [ ! -z "$file" ]; then
                        mkdir -p "../updater-repo/hotfixes/${{ steps.version.outputs.PREV_VERSION }}/$(dirname "$file")"
                        cp "$file" "../updater-repo/hotfixes/${{ steps.version.outputs.PREV_VERSION }}/$file"
                        HASH=$(sha256sum "$file" | awk '{print $1}')
                        echo "$file|$HASH" >> "../updater-repo/hashes/${{ steps.version.outputs.PREV_VERSION }}/hashes.txt"
                      fi
                    done
                  fi

                  # Process deleted files - create empty files
                  if [ -n "${{ steps.changed_files.outputs.deleted_files }}" ]; then
                    echo "${{ steps.changed_files.outputs.deleted_files }}" | while IFS= read -r file; do
                      if [ ! -z "$file" ]; then
                        mkdir -p "../updater-repo/hotfixes/${{ steps.version.outputs.PREV_VERSION }}/$(dirname "$file")"
                        touch "../updater-repo/hotfixes/${{ steps.version.outputs.PREV_VERSION }}/$file"
                        # Generate hash for empty file
                        HASH=$(sha256sum "../updater-repo/hotfixes/${{ steps.version.outputs.PREV_VERSION }}/$file" | awk '{print $1}')
                        echo "$file|$HASH" >> "../updater-repo/hashes/${{ steps.version.outputs.PREV_VERSION }}/hashes.txt"
                      fi
                    done
                  fi

            - name: Extract changelog
              working-directory: mel-repo
              run: |
                  mkdir -p "../updater-repo/versions/${{ steps.version.outputs.LATEST_VERSION }}"
                  sed -n "/^## v${{ steps.version.outputs.LATEST_VERSION }}/,/^## /p" CHANGELOG.md | sed '$d' > "../updater-repo/versions/${{ steps.version.outputs.LATEST_VERSION }}/changelog.txt"

            - name: Update meta.json
              working-directory: updater-repo
              run: |
                  if [ ! -f meta.json ]; then
                    echo '{"schemaVersion":1,"hotfixesFormat":null,"versions":[]}' > meta.json
                  fi

                  TIMESTAMP=$(date +%s%3N)
                  VERSION="${{ steps.version.outputs.LATEST_VERSION }}"

                  # Create new version entry
                  NEW_VERSION=$(cat <<EOF
                  {
                    "id": "$VERSION",
                    "releasedAt": $TIMESTAMP,
                    "promotions": {
                      "downloads": {
                        "generic": "https://github.com/FalAut/Mierno/releases/download/v${VERSION}/Mierno-${VERSION}.zip"
                      }
                    },
                    "updateType": "minor"
                  }
                  EOF
                  )

                  # Update meta.json
                  jq --argjson new "$NEW_VERSION" '.versions += [$new]' meta.json > meta.json.tmp
                  mv meta.json.tmp meta.json

            - name: Commit and push changes
              working-directory: updater-repo
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

                  git remote set-url origin https://x-access-token:${{ secrets.MODPACK_UPDATER_TOKEN }}@github.com/FalAut/Mierno-updater.git

                  git add .
                  git commit -m "Update for version ${{ steps.version.outputs.LATEST_VERSION }}" || echo "No changes to commit"
                  git push
